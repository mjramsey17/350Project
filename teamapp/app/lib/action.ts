'use server';
import {z} from 'zod';
import { sql } from '@vercel/postgres';
import { revalidatePath } from 'next/cache';
import { redirect } from 'next/navigation';

const FormSchema = z.object({
    EventId:z.coerce.number(),
    GameId: z.coerce.number(),
    Time: z.coerce.number(),
    Team: z.coerce.number(),
    Type: z.string(),
    PlayerId: z.coerce.number(),
  });
 
const CreateEvent = FormSchema.omit({ EventId: true});

export async function createEvent(formData: FormData) {
    console.log("bruh");
  const {GameId,Time, Type,Team,PlayerId}= CreateEvent.parse({
    //EventId: formData.get("eventId"),
    GameId: formData.get("gameID"), 
    Time:formData.get("time"), 
    Type: formData.get("eventType"), 
    Team: formData.get('team'), 
    PlayerId: formData.get("playerID")
  });
  console.log("here1")
  await sql`
  INSERT INTO Events (GameId, Time, Type, Team, PlayerId)
  VALUES (${GameId}, ${Time}, ${Type}, ${Team}, ${PlayerId})
  `;
    revalidatePath('/events');
    redirect('/events');
}











/*import { z } from 'zod';
import { sql } from '@vercel/postgres';
import { revalidatePath } from 'next/cache';
import { redirect } from 'next/navigation';

// Define your schema for validation
const FormSchema = z.object({
  GameId: z.coerce.number(),
  Time: z.coerce.number(),
  Team: z.coerce.number(),
  Type: z.string(),
  PlayerId: z.coerce.number(),
});

// Create a new schema that omits EventId
const CreateEvent = FormSchema.omit({ EventId: true });

// Create the action that handles form submission and inserts the event into the database
export async function createEvent(formData: FormData) {
  // Parse and validate form data
  const { GameId, Time, Type, Team, PlayerId } = CreateEvent.parse({
    GameId: formData.get('GameId'),
    Time: formData.get('Time'),
    Type: formData.get('Type'),
    Team: formData.get('Team'),
    PlayerId: formData.get('PlayerId'),
  });

  // Insert the event into the database (assuming EventId is auto-generated by the DB)
  await sql`
    INSERT INTO Events (GameId, Time, Type, Team, PlayerId)
    VALUES (${GameId}, ${Time}, ${Type}, ${Team}, ${PlayerId})
  `;

  // Revalidate the events page and redirect
  revalidatePath('/events');
  redirect('/events');
}
*/
/*
'use server';

import { z } from 'zod';
import { sql } from '@vercel/postgres';
import { revalidatePath } from 'next/cache';
import { redirect } from 'next/navigation';

const FormSchema = z.object({
  GameID: z.coerce.number(),
  Time: z.coerce.number(),
  Team: z.coerce.number(),
  Type: z.string(),
  PlayerID: z.coerce.number(),
});

// Omit EventId if it's auto-generated by the database
const CreateEvent = FormSchema.omit({ EventId: true });

// Define the function to insert data into the database
export async function createEvent(formData: any) {
  try {
    const parsedData = CreateEvent.parse(formData); // Validate and parse the data

    // Insert the data into the SQL database
    await sql`
      INSERT INTO Events (GameId, Time, Type, Team, PlayerId)
      VALUES (${parsedData. GameID}, ${parsedData.Time}, ${parsedData.Type}, ${parsedData.Team}, ${parsedData.PlayerID})
    `;

    // Revalidate the path and redirect to the events page
    revalidatePath('/events');
    redirect('/events');
  } catch (error) {
    console.error('Error creating event:', error);
    throw new Error('Failed to create event');
  }
}
*/